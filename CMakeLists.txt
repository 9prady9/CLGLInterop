CMAKE_MINIMUM_REQUIRED(VERSION 3.0.2)

PROJECT(CLGLInterop)

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
SET(ASSETS_DIR "${CMAKE_CURRENT_SOURCE_DIR}/assets")

# Set a default build type if none was specified
IF(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    SET(CMAKE_BUILD_TYPE Release CACHE STRING "Choose the type of build." FORCE)
    # Set the possible values of build type for cmake-gui
    SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release"
        "MinSizeRel" "RelWithDebInfo")
ENDIF()

ADD_DEFINITIONS("-DASSETS_DIR=\"${ASSETS_DIR}\"")

IF(UNIX)
    ADD_DEFINITIONS(-Wall -std=c++11 -fvisibility=hidden)
ENDIF()

# OS Definitions
IF(UNIX)
    IF(APPLE)
        ADD_DEFINITIONS(-DOS_MAC)
        SET(CMAKE_MACOSX_RPATH ON)
        SET(CMAKE_SKIP_BUILD_RPATH  FALSE)
        SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
        SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}")
        SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

        LIST(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}" isSystemDir)
        IF("${isSystemDir}" STREQUAL "-1")
            SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}")
        ENDIF("${isSystemDir}" STREQUAL "-1")
    ELSE(APPLE)
        ADD_DEFINITIONS(-DOS_LNX)
    ENDIF(APPLE)
ELSE(UNIX)
    ADD_DEFINITIONS(-DOS_WIN -DNOMINMAX)
ENDIF(UNIX)

SET(X11_LIBS "")
IF(APPLE)
    FIND_PACKAGE(X11 REQUIRED)
    INCLUDE_DIRECTORIES(${X11_INCLUDE_DIR})
    SET(X11_LIBS ${X11_LIBRARIES})
ENDIF(APPLE)

FIND_PACKAGE(GLEW REQUIRED)
FIND_PACKAGE(OpenGL REQUIRED)
FIND_PACKAGE(GLFW REQUIRED)
FIND_PACKAGE(OpenCL REQUIRED)

IF(OpenCL_FOUND)
    IF(${OpenCL_VERSION_MAJOR} EQUAL 1 AND ${OpenCL_VERSION_MINOR} LESS 2)
        MESSAGE(FATAL_ERROR "At least OpenCL 1.2 version required")
    ENDIF()
ENDIF()

INCLUDE_DIRECTORIES(
    ${GLEW_INCLUDE_DIRS}
    ${OPENGL_INCLUDE_DIR}
    ${GLFW_INCLUDE_DIR}
    ${OpenCL_INCLUDE_DIRS}
    "${CMAKE_SOURCE_DIR}/common"
    )

FILE(GLOB common_src "common/*.cpp")
FILE(GLOB examples_src "examples/*.cpp")

MACRO(BUILD_EXAMPLE EXAMPLE_NAME EXAMPLE_SOURCE OUT_DIR_NAME)
    ADD_EXECUTABLE(${EXAMPLE_NAME}
        ${EXAMPLE_SOURCE}
        ${common_src}
        )
    TARGET_LINK_LIBRARIES(${EXAMPLE_NAME}
        PRIVATE ${GLEW_LIBRARIES}
        PRIVATE ${OPENGL_LIBRARIES}
        PRIVATE ${GLFW_LIBRARY}
        PRIVATE ${OpenCL_LIBRARIES}
        PRIVATE ${X11_LIBS}
        )
    SET_TARGET_PROPERTIES(${EXAMPLE_NAME}
        PROPERTIES
        OUTPUT_NAME ${EXAMPLE_NAME}
        RUNTIME_OUTPUT_DIRECTORY ${OUT_DIR_NAME}
        FOLDER "CLGL-Examples")
ENDMACRO()

FOREACH(FILE ${examples_src})
    GET_FILENAME_COMPONENT(EXAMPLE ${FILE} NAME_WE)
    GET_FILENAME_COMPONENT(FULL_DIR_NAME ${FILE} PATH)
    GET_FILENAME_COMPONENT(DIR_NAME ${FULL_DIR_NAME} NAME)
    BUILD_EXAMPLE(${EXAMPLE} ${FILE} ${DIR_NAME})
ENDFOREACH()
